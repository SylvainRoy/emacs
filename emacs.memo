= Memo =


== Keys ==


=== Global Keys ===

- C-x z: repeat previous command
- C-q C-j: insert new line in mini buffer
- M-3: Equivalent C-u 3


=== Custom keys===

- M-o: next buffer
- M-S-o: previous buffer
- F7: recently opened files
- C-S-c C-S-c: multiple cursors on lines of block
- C-,: multiple cursors on next line
- C-<: multiple cursors on previous line
- C-c C-,: multiple cursors on all similar lines
- M-j: join lines
- C-S-j: Eval elisp expression and replace by result
- pause: sticky buffer
- f7: recently opened files


== Tips ==

- C-h f piece-of-fun-name: to get function documentation


== Pieces of code ==

;; Link a command to key binding
(global-set-key (kbd "C-c C-c") 'compile)

;; Call an external script on a region and use output to replace it
(defun do-something-region (startPos endPos)
  "Do some text processing on region.
This command calls the external script “wc”."
(interactive "r")
  (let (scriptName)
    (setq scriptName "/usr/bin/wc") ; full path to your script
    (shell-command-on-region startPos endPos scriptName nil t nil t)
    ))

;; Template of interactive function
(defun test ()
  "my super fun"
  (interactive)
  (message "Here is the word at point: %s" (thing-at-point 'word))
  (end-of-thing 'word)
  (right-char))


;;
;; Various stuff...
;;

(goto-char (point-min))

(while (search-forward "myStr1" nil t) (replace-match "myReplaceStr1"))

(defun change-title ()
  "change underline by surrounding =="
  (interactive)
  (kill-whole-line)
  (line-move -1)
  (beginning-of-line)
  (insert "== ")
  (end-of-line)
  (insert " =="))
